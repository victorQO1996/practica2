package com.test.clase.demo.controller;

import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;

/**
 * @RequestController  indica que esta clase sera un controlador de servicio Rest
 */

@RestController
public class HelloController {


    /**
     * Traza la ruta raiz "/" y envia saludo
     */
    @RequestMapping("/")
    public String index() {
        return "Saludos!!! desde Spring Boot!";
    }


    @RequestMapping(
            //Ruta
            value = "/alumnos",
            //Metodo de peticion
            method = RequestMethod.GET,
            //Que tipos de datos produce al responder
            produces = { "application/JSON"},
            //Que tipos de datos acepta(consume) en la peticion
            consumes = MediaType.ALL_VALUE )
    public String test(
            //Variable
            @RequestParam(value="name", defaultValue="Sin nombre") String name
    ) {
        return "{ \"saludo\": \"Salduos, "+name+" !!!\"}";
    }
    @RequestMapping(
            //Ruta
            value = "/alumnosA",
            //Metodo de peticion
            method = RequestMethod.GET,
            //Que tipos de datos produce al responder
            produces = { "image/png"},
            //Que tipos de datos acepta(consume) en la peticion
            consumes = MediaType.ALL_VALUE )
    public HttpEntity<byte[]> testA() {
        //Imagen PNG en base64
        String imagenBase64="";
       //Conversion de Base64 a Bytes
        byte[] bytes = Base64.decodeBase64(imagenBase64);
        //Cabecera de HTTP para respuesta
        HttpHeaders headers = new HttpHeaders();
        //Tipo de contenido de respuesta
        headers.setContentType(MediaType.IMAGE_PNG);
        //Tamaño de respuesta
        headers.setContentLength(bytes.length);

        return new HttpEntity<byte[]>(bytes, headers);

    }


    /**
     *
     * @CommandLineRunner, sirve para crear una acción mientras al inicio de la aplicación
     *
     */

    @Bean
    public CommandLineRunner commandLineRunner(ApplicationContext ctx) {
        return args -> {

            System.out.println("Inspeccionar los beans que provee Spring Boot:");

            /**
             * Le pide al contexto (ctx) los bean definidos
             */
            String[] beanNames = ctx.getBeanDefinitionNames();
            Arrays.sort(beanNames);
            for (String beanName : beanNames) {
                System.err.println(beanName);
            }

        };
    }

}
